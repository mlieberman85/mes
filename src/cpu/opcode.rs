#[derive(Debug)]
#[derive(Clone)]
#[derive(Copy)]
/// List of all NES instructions. This also includes "illegal" opcode based instructions.
pub enum Instruction {
    // Taken from: http://nesdev.com/6502.txt
    // Should probably be generated by a macro somewhere
    ADC, // Add Memory to Accumulator with Carry
    AND, // "AND" Memory with Accumulator
    ASL, // Shift Left One Bit (Memory or Accumulator)

    BCC, // Branch on Carry Clear
    BCS, // Branch on Carry Set
    BEQ, // Branch on Result Zero
    BIT, // Test Bits in Memory with Accumulator
    BMI, // Branch on Result Minus
    BNE, // Branch on Result not Zero
    BPL, // Branch on Result Plus
    BRK, // Force Break
    BVC, // Branch on Overflow Clear
    BVS, // Branch on Overflow Set

    CLC, // Clear Carry Flag
    CLD, // Clear Decimal Mode
    CLI, // Clear interrupt Disable Bit
    CLV, // Clear Overflow Flag
    CMP, // Compare Memory and Accumulator
    CPX, // Compare Memory and Index X
    CPY, // Compare Memory and Index Y

    DEC, // Decrement Memory by One
    DEX, // Decrement Index X by One
    DEY, // Decrement Index Y by One

    EOR, // "ExclusiveOr" Memory with Accumulator

    INC, // Increment Memory by One
    INX, // Increment Index X by One
    INY, // Increment Index Y by One

    JMP, // Jump to New Location

    JSR, // Jump to New Location Saving Return Address

    LDA, // Load Accumulator with Memory
    LDX, // Load Index X with Memory
    LDY, // Load Index Y with Memory
    LSR, // Shift Right One Bit (Memory or Accumulator)

    NOP, // No Operation

    ORA, // "OR" Memory with Accumulator

    PHA, // Push Accumulator on Stack
    PHP, // Push Processor Status on Stack
    PLA, // Pull Accumulator from Stack
    PLP, // Pull Processor Status from Stack

    ROL, // Rotate One Bit Left (Memory or Accumulator)
    ROR, // Rotate One Bit Right (Memory or Accumulator)
    RTI, // Return from Interrupt
    RTS, // Return from Subroutine

    SBC, // Subtract Memory from Accumulator with Borrow
    SEC, // Set Carry Flag
    SED, // Set Decimal Mode
    SEI, // Set Interrupt Disable Status
    STA, // Store Accumulator in Memory
    STX, // Store Index X in Memory
    STY, // Store Index Y in Memory

    TAX, // Transfer Accumulator to Index X
    TAY, // Transfer Accumulator to Index Y
    TSX, // Transfer Stack Pointer to Index X
    TXA, // Transfer Index X to Accumulator
    TXS, // Transfer Index X to Stack Pointer
    TYA, // Transfer Index Y to Accumulator

    // Below are all illegal aka unofficial instructions
    // Combined Instructions
    // ALR, - Not worth implementing now
    // ANC, - Not worth implementing now
    // ARR, - Not worth implementing now
    // AXS, - Not worth implementing now
    LAX,
    SAX,

    // RMW instructions - Read, modify, write
    DCP,
    ISC,
    RLA,
    RRA,
    SLO,
    SRE,
}

#[derive(Debug)]
#[derive(PartialEq)]
#[derive(Clone)]
#[derive(Copy)]
/// List of the addressing modes that are available in the NES. Below comments for each element in
/// the enum represent how it looks in 6502 assembly, any other names the addressing mode is also
/// known as and any other pertinent information. It is still worth looking at other NES/emulation
/// documentation on specifically how the various addressing modes work. The comments are mostly
/// intended to make it easy to figure out what addressing mode the operand is based on the assembly
/// code and to also make it easy to sort out which of the various names for the addressing modes
/// refer to what enum in the below list.
///
/// ZeroPage is sometimes referred to as Zero Page or Zero-Page.
/// LL and BB is used to indicate 8 bit byte. HHLL is Used to indicate 16 bit word.
///
/// Some of below might not be 100% accurate based on differences in assembler documentation and I
/// might be confusing them.
pub enum AddressingMode {
    /// aka "Zero-Page" "d"
    /// $LL
    ZeroPage,

    /// aka "Zero-Page Indexed" "Zero Page,X" "z,x"
    /// This and IndexedZeroPageY are largely equivalent and only differ on what register is used
    /// based on instruction.
    /// $LL,X
    IndexedZeroPageX,

    /// aka "Zero-page Indexed" "Zero Page,Y "z,y"
    /// This and IndexedZeroPageY are largely equivalent and only differ on what register is used
    /// based on instruction.
    /// $LL,Y
    IndexedZeroPageY,

    /// aka "a"
    /// $HHLL
    Absolute,

    /// aka "Absolute Indexed" "Indexed Addressing" "Absolute,X" "a,x"
    /// This and IndexedAbsoluteY are largely equivalent and only differ on what register is used
    /// based on instruction.
    /// $HHLL,X
    IndexedAbsoluteX,

    /// aka "Absolute Indexed" "Indexed Addressing" "Absolute,Y" "a,y"
    /// This and IndexedAbsoluteY are largely equivalent and only differ on what register is used
    /// based on instruction.
    /// $HHLL,Y
    IndexedAbsoluteY,

    /// aka "(a)"
    /// ($HHLL)
    Indirect,

    /// aka "Implicit" aka "" -- This has no abbreviation.
    /// There is no operand for implied.
    Implied,

    /// aka "A"
    /// Depending on assembler there is either no operand as accumulator is implied or operand is
    /// just the letter "A" (without quotes)
    Accumulator,

    /// aka "#v"
    /// Immediate means that the operand is not a memory location to a value but a value itself.
    /// #$BB
    Immediate,

    /// aka "label"
    /// This can either be a label or a 8 bit relative offset. Label below can be any name.
    /// LABEL
    /// *+BB
    /// *-BB
    Relative,

    /// aka "Pre-Indexed Indirect" "Indirect,X" "(d,x)"
    /// ($BB, X)
    IndexedIndirect,

    /// aka "Post-Indexed Indirect" "Indirect,Y" "(d),y"
    /// ($LL, Y)
    IndirectIndexed
}

type Opcode = u8;

#[derive(Debug)]
#[derive(Clone)]
#[derive(Copy)]
/// A combination of instruction, addressing mode, and number of cycles the instruction-addressing
/// mode operation would take.
pub struct DecodedOpcode {
    pub instruction: Instruction,
    pub mode: AddressingMode,
    pub cycles: u8
}

pub enum DecodeError {
    /// Just an error representing an illegal opcode that is also unimplemented.
    IllegalUnimplementedOpcode {
        opcode: Opcode
    }
}

trait Decode {
    fn decode(&self) -> Result<DecodedOpcode, DecodeError>;
}

impl Decode for Opcode {
    /// Returns a result that is either a decoded opcode or an error if that opcode is unimplemented
    ///
    /// # Example
    ///
    /// ```
    /// let decoded = 0x6C.decode();
    /// ```
    fn decode(&self) -> Result<DecodedOpcode, DecodeError> {
        {
            /*
            Below is taken from: http://nesdev.com/6502_cpu.txt See doc for number of cycles.
            6510 Instructions by Addressing Modes
            off- ++++++++++ Positive ++++++++++  ---------- Negative ----------
            set  00      20      40      60      80      a0      c0      e0      mode
            +00  BRK     JSR     RTI     RTS     NOP*    LDY     CPY     CPX     Impl/immed
            +01  ORA     AND     EOR     ADC     STA     LDA     CMP     SBC     (indir,x)
            +02   t       t       t       t      NOP*t   LDX     NOP*t   NOP*t     ? /immed
            +03  SLO*    RLA*    SRE*    RRA*    SAX*    LAX*    DCP*    ISB*    (indir,x)
            +04  NOP*    BIT     NOP*    NOP*    STY     LDY     CPY     CPX     Zeropage
            +05  ORA     AND     EOR     ADC     STA     LDA     CMP     SBC     Zeropage
            +06  ASL     ROL     LSR     ROR     STX     LDX     DEC     INC     Zeropage
            +07  SLO*    RLA*    SRE*    RRA*    SAX*    LAX*    DCP*    ISB*    Zeropage
            +08  PHP     PLP     PHA     PLA     DEY     TAY     INY     INX     Implied
            +09  ORA     AND     EOR     ADC     NOP*    LDA     CMP     SBC     Immediate
            +0a  ASL     ROL     LSR     ROR     TXA     TAX     DEX     NOP     Accu/impl
            +0b  ANC**   ANC**   ASR**   ARR**   ANE**   LXA**   SBX**   SBC*    Immediate
            +0c  NOP*    BIT     JMP     JMP ()  STY     LDY     CPY     CPX     Absolute
            +0d  ORA     AND     EOR     ADC     STA     LDA     CMP     SBC     Absolute
            +0e  ASL     ROL     LSR     ROR     STX     LDX     DEC     INC     Absolute
            +0f  SLO*    RLA*    SRE*    RRA*    SAX*    LAX*    DCP*    ISB*    Absolute
            +10  BPL     BMI     BVC     BVS     BCC     BCS     BNE     BEQ     Relative
            +11  ORA     AND     EOR     ADC     STA     LDA     CMP     SBC     (indir),y
            +12   t       t       t       t       t       t       t       t         ?
            +13  SLO*    RLA*    SRE*    RRA*    SHA**   LAX*    DCP*    ISB*    (indir),y
            +14  NOP*    NOP*    NOP*    NOP*    STY     LDY     NOP*    NOP*    Zeropage,x
            +15  ORA     AND     EOR     ADC     STA     LDA     CMP     SBC     Zeropage,x
            +16  ASL     ROL     LSR     ROR     STX  y) LDX  y) DEC     INC     Zeropage,x
            +17  SLO*    RLA*    SRE*    RRA*    SAX* y) LAX* y) DCP*    ISB*    Zeropage,x
            +18  CLC     SEC     CLI     SEI     TYA     CLV     CLD     SED     Implied
            +19  ORA     AND     EOR     ADC     STA     LDA     CMP     SBC     Absolute,y
            +1a  NOP*    NOP*    NOP*    NOP*    TXS     TSX     NOP*    NOP*    Implied
            +1b  SLO*    RLA*    SRE*    RRA*    SHS**   LAS**   DCP*    ISB*    Absolute,y
            +1c  NOP*    NOP*    NOP*    NOP*    SHY**   LDY     NOP*    NOP*    Absolute,x
            +1d  ORA     AND     EOR     ADC     STA     LDA     CMP     SBC     Absolute,x
            +1e  ASL     ROL     LSR     ROR     SHX**y) LDX  y) DEC     INC     Absolute,x
            +1f  SLO*    RLA*    SRE*    RRA*    SHA**y) LAX* y) DCP*    ISB*    Absolute,x
            */
            use self::Instruction::*;
            use self::AddressingMode::*;
            // This should be generated by a macro of some sort. Right now it's generated by my parser
            // Python script which I forgot where I put it.
            match self {
                0x69 => Ok(DecodedOpcode { instruction: ADC, mode: Immediate, cycles: 2 }),
                0x65 => Ok(DecodedOpcode { instruction: ADC, mode: ZeroPage, cycles: 3 }),
                0x75 => Ok(DecodedOpcode { instruction: ADC, mode: IndexedZeroPageX, cycles: 4 }),
                0x6D => Ok(DecodedOpcode { instruction: ADC, mode: Absolute, cycles: 4 }),
                0x7D => Ok(DecodedOpcode { instruction: ADC, mode: IndexedAbsoluteX, cycles: 4 }),
                0x79 => Ok(DecodedOpcode { instruction: ADC, mode: IndexedAbsoluteY, cycles: 4 }),
                0x61 => Ok(DecodedOpcode { instruction: ADC, mode: IndexedIndirect, cycles: 6 }),
                0x71 => Ok(DecodedOpcode { instruction: ADC, mode: IndirectIndexed, cycles: 5 }),
                0x29 => Ok(DecodedOpcode { instruction: AND, mode: Immediate, cycles: 2 }),
                0x25 => Ok(DecodedOpcode { instruction: AND, mode: ZeroPage, cycles: 3 }),
                0x35 => Ok(DecodedOpcode { instruction: AND, mode: IndexedZeroPageX, cycles: 4 }),
                0x2D => Ok(DecodedOpcode { instruction: AND, mode: Absolute, cycles: 4 }),
                0x3D => Ok(DecodedOpcode { instruction: AND, mode: IndexedAbsoluteX, cycles: 4 }),
                0x39 => Ok(DecodedOpcode { instruction: AND, mode: IndexedAbsoluteY, cycles: 4 }),
                0x21 => Ok(DecodedOpcode { instruction: AND, mode: IndexedIndirect, cycles: 6 }),
                0x31 => Ok(DecodedOpcode { instruction: AND, mode: IndirectIndexed, cycles: 5 }),
                0x0A => Ok(DecodedOpcode { instruction: ASL, mode: Accumulator, cycles: 2 }),
                0x06 => Ok(DecodedOpcode { instruction: ASL, mode: ZeroPage, cycles: 5 }),
                0x16 => Ok(DecodedOpcode { instruction: ASL, mode: IndexedZeroPageX, cycles: 6 }),
                0x0E => Ok(DecodedOpcode { instruction: ASL, mode: Absolute, cycles: 6 }),
                0x1E => Ok(DecodedOpcode { instruction: ASL, mode: IndexedAbsoluteX, cycles: 7 }),
                0x90 => Ok(DecodedOpcode { instruction: BCC, mode: Relative, cycles: 2 }),
                0xB0 => Ok(DecodedOpcode { instruction: BCS, mode: Relative, cycles: 2 }),
                0xF0 => Ok(DecodedOpcode { instruction: BEQ, mode: Relative, cycles: 2 }),
                0x24 => Ok(DecodedOpcode { instruction: BIT, mode: ZeroPage, cycles: 3 }),
                0x2C => Ok(DecodedOpcode { instruction: BIT, mode: Absolute, cycles: 4 }),
                0x30 => Ok(DecodedOpcode { instruction: BMI, mode: Relative, cycles: 2 }),
                0xD0 => Ok(DecodedOpcode { instruction: BNE, mode: Relative, cycles: 2 }),
                0x10 => Ok(DecodedOpcode { instruction: BPL, mode: Relative, cycles: 2 }),
                0x00 => Ok(DecodedOpcode { instruction: BRK, mode: Implied, cycles: 7 }),
                0x50 => Ok(DecodedOpcode { instruction: BVC, mode: Relative, cycles: 2 }),
                0x70 => Ok(DecodedOpcode { instruction: BVS, mode: Relative, cycles: 2 }),
                0x18 => Ok(DecodedOpcode { instruction: CLC, mode: Implied, cycles: 2 }),
                0xD8 => Ok(DecodedOpcode { instruction: CLD, mode: Implied, cycles: 2 }),
                0x58 => Ok(DecodedOpcode { instruction: CLI, mode: Implied, cycles: 2 }),
                0xB8 => Ok(DecodedOpcode { instruction: CLV, mode: Implied, cycles: 2 }),
                0xC9 => Ok(DecodedOpcode { instruction: CMP, mode: Immediate, cycles: 2 }),
                0xC5 => Ok(DecodedOpcode { instruction: CMP, mode: ZeroPage, cycles: 3 }),
                0xD5 => Ok(DecodedOpcode { instruction: CMP, mode: IndexedZeroPageX, cycles: 4 }),
                0xCD => Ok(DecodedOpcode { instruction: CMP, mode: Absolute, cycles: 4 }),
                0xDD => Ok(DecodedOpcode { instruction: CMP, mode: IndexedAbsoluteX, cycles: 4 }),
                0xD9 => Ok(DecodedOpcode { instruction: CMP, mode: IndexedAbsoluteY, cycles: 4 }),
                0xC1 => Ok(DecodedOpcode { instruction: CMP, mode: IndexedIndirect, cycles: 6 }),
                0xD1 => Ok(DecodedOpcode { instruction: CMP, mode: IndirectIndexed, cycles: 5 }),
                0xE0 => Ok(DecodedOpcode { instruction: CPX, mode: Immediate, cycles: 2 }),
                0xE4 => Ok(DecodedOpcode { instruction: CPX, mode: ZeroPage, cycles: 3 }),
                0xEC => Ok(DecodedOpcode { instruction: CPX, mode: Absolute, cycles: 4 }),
                0xC0 => Ok(DecodedOpcode { instruction: CPY, mode: Immediate, cycles: 2 }),
                0xC4 => Ok(DecodedOpcode { instruction: CPY, mode: ZeroPage, cycles: 3 }),
                0xCC => Ok(DecodedOpcode { instruction: CPY, mode: Absolute, cycles: 4 }),
                0xC6 => Ok(DecodedOpcode { instruction: DEC, mode: ZeroPage, cycles: 5 }),
                0xD6 => Ok(DecodedOpcode { instruction: DEC, mode: IndexedZeroPageX, cycles: 6 }),
                0xCE => Ok(DecodedOpcode { instruction: DEC, mode: Absolute, cycles: 6 }),
                0xDE => Ok(DecodedOpcode { instruction: DEC, mode: IndexedAbsoluteX, cycles: 7 }),
                0xCA => Ok(DecodedOpcode { instruction: DEX, mode: Implied, cycles: 2 }),
                0x88 => Ok(DecodedOpcode { instruction: DEY, mode: Implied, cycles: 2 }),
                0x49 => Ok(DecodedOpcode { instruction: EOR, mode: Immediate, cycles: 2 }),
                0x45 => Ok(DecodedOpcode { instruction: EOR, mode: ZeroPage, cycles: 3 }),
                0x55 => Ok(DecodedOpcode { instruction: EOR, mode: IndexedZeroPageX, cycles: 4 }),
                0x4D => Ok(DecodedOpcode { instruction: EOR, mode: Absolute, cycles: 4 }),
                0x5D => Ok(DecodedOpcode { instruction: EOR, mode: IndexedAbsoluteX, cycles: 4 }),
                0x59 => Ok(DecodedOpcode { instruction: EOR, mode: IndexedAbsoluteY, cycles: 4 }),
                0x41 => Ok(DecodedOpcode { instruction: EOR, mode: IndexedIndirect, cycles: 6 }),
                0x51 => Ok(DecodedOpcode { instruction: EOR, mode: IndirectIndexed, cycles: 5 }),
                0xE6 => Ok(DecodedOpcode { instruction: INC, mode: ZeroPage, cycles: 5 }),
                0xF6 => Ok(DecodedOpcode { instruction: INC, mode: IndexedZeroPageX, cycles: 6 }),
                0xEE => Ok(DecodedOpcode { instruction: INC, mode: Absolute, cycles: 6 }),
                0xFE => Ok(DecodedOpcode { instruction: INC, mode: IndexedAbsoluteX, cycles: 7 }),
                0xE8 => Ok(DecodedOpcode { instruction: INX, mode: Implied, cycles: 2 }),
                0xC8 => Ok(DecodedOpcode { instruction: INY, mode: Implied, cycles: 2 }),
                0x4C => Ok(DecodedOpcode { instruction: JMP, mode: Absolute, cycles: 3 }),
                0x6C => Ok(DecodedOpcode { instruction: JMP, mode: Indirect, cycles: 5 }),
                0x20 => Ok(DecodedOpcode { instruction: JSR, mode: Absolute, cycles: 6 }),
                0xA9 => Ok(DecodedOpcode { instruction: LDA, mode: Immediate, cycles: 2 }),
                0xA5 => Ok(DecodedOpcode { instruction: LDA, mode: ZeroPage, cycles: 3 }),
                0xB5 => Ok(DecodedOpcode { instruction: LDA, mode: IndexedZeroPageX, cycles: 4 }),
                0xAD => Ok(DecodedOpcode { instruction: LDA, mode: Absolute, cycles: 4 }),
                0xBD => Ok(DecodedOpcode { instruction: LDA, mode: IndexedAbsoluteX, cycles: 4 }),
                0xB9 => Ok(DecodedOpcode { instruction: LDA, mode: IndexedAbsoluteY, cycles: 4 }),
                0xA1 => Ok(DecodedOpcode { instruction: LDA, mode: IndexedIndirect, cycles: 6 }),
                0xB1 => Ok(DecodedOpcode { instruction: LDA, mode: IndirectIndexed, cycles: 5 }),
                0xA2 => Ok(DecodedOpcode { instruction: LDX, mode: Immediate, cycles: 2 }),
                0xA6 => Ok(DecodedOpcode { instruction: LDX, mode: ZeroPage, cycles: 3 }),
                0xB6 => Ok(DecodedOpcode { instruction: LDX, mode: IndexedZeroPageY, cycles: 4 }),
                0xAE => Ok(DecodedOpcode { instruction: LDX, mode: Absolute, cycles: 4 }),
                0xBE => Ok(DecodedOpcode { instruction: LDX, mode: IndexedAbsoluteY, cycles: 4 }),
                0xA0 => Ok(DecodedOpcode { instruction: LDY, mode: Immediate, cycles: 2 }),
                0xA4 => Ok(DecodedOpcode { instruction: LDY, mode: ZeroPage, cycles: 3 }),
                0xB4 => Ok(DecodedOpcode { instruction: LDY, mode: IndexedZeroPageX, cycles: 4 }),
                0xAC => Ok(DecodedOpcode { instruction: LDY, mode: Absolute, cycles: 4 }),
                0xBC => Ok(DecodedOpcode { instruction: LDY, mode: IndexedAbsoluteX, cycles: 4 }),
                0x4A => Ok(DecodedOpcode { instruction: LSR, mode: Accumulator, cycles: 2 }),
                0x46 => Ok(DecodedOpcode { instruction: LSR, mode: ZeroPage, cycles: 5 }),
                0x56 => Ok(DecodedOpcode { instruction: LSR, mode: IndexedZeroPageX, cycles: 6 }),
                0x4E => Ok(DecodedOpcode { instruction: LSR, mode: Absolute, cycles: 6 }),
                0x5E => Ok(DecodedOpcode { instruction: LSR, mode: IndexedAbsoluteX, cycles: 7 }),
                0xEA => Ok(DecodedOpcode { instruction: NOP, mode: Implied, cycles: 2 }),
                0x09 => Ok(DecodedOpcode { instruction: ORA, mode: Immediate, cycles: 2 }),
                0x05 => Ok(DecodedOpcode { instruction: ORA, mode: ZeroPage, cycles: 3 }),
                0x15 => Ok(DecodedOpcode { instruction: ORA, mode: IndexedZeroPageX, cycles: 4 }),
                0x0D => Ok(DecodedOpcode { instruction: ORA, mode: Absolute, cycles: 4 }),
                0x1D => Ok(DecodedOpcode { instruction: ORA, mode: IndexedAbsoluteX, cycles: 4 }),
                0x19 => Ok(DecodedOpcode { instruction: ORA, mode: IndexedAbsoluteY, cycles: 4 }),
                0x01 => Ok(DecodedOpcode { instruction: ORA, mode: IndexedIndirect, cycles: 6 }),
                0x11 => Ok(DecodedOpcode { instruction: ORA, mode: IndirectIndexed, cycles: 5 }),
                0x48 => Ok(DecodedOpcode { instruction: PHA, mode: Implied, cycles: 3 }),
                0x08 => Ok(DecodedOpcode { instruction: PHP, mode: Implied, cycles: 3 }),
                0x68 => Ok(DecodedOpcode { instruction: PLA, mode: Implied, cycles: 4 }),
                0x28 => Ok(DecodedOpcode { instruction: PLP, mode: Implied, cycles: 4 }),
                0x2A => Ok(DecodedOpcode { instruction: ROL, mode: Accumulator, cycles: 2 }),
                0x26 => Ok(DecodedOpcode { instruction: ROL, mode: ZeroPage, cycles: 5 }),
                0x36 => Ok(DecodedOpcode { instruction: ROL, mode: IndexedZeroPageX, cycles: 6 }),
                0x2E => Ok(DecodedOpcode { instruction: ROL, mode: Absolute, cycles: 6 }),
                0x3E => Ok(DecodedOpcode { instruction: ROL, mode: IndexedAbsoluteX, cycles: 7 }),
                0x6A => Ok(DecodedOpcode { instruction: ROR, mode: Accumulator, cycles: 2 }),
                0x66 => Ok(DecodedOpcode { instruction: ROR, mode: ZeroPage, cycles: 5 }),
                0x76 => Ok(DecodedOpcode { instruction: ROR, mode: IndexedZeroPageX, cycles: 6 }),
                0x6E => Ok(DecodedOpcode { instruction: ROR, mode: Absolute, cycles: 6 }),
                0x7E => Ok(DecodedOpcode { instruction: ROR, mode: IndexedAbsoluteX, cycles: 7 }),
                0x40 => Ok(DecodedOpcode { instruction: RTI, mode: Implied, cycles: 6 }),
                0x60 => Ok(DecodedOpcode { instruction: RTS, mode: Implied, cycles: 6 }),
                0xE9 => Ok(DecodedOpcode { instruction: SBC, mode: Immediate, cycles: 2 }),
                0xE5 => Ok(DecodedOpcode { instruction: SBC, mode: ZeroPage, cycles: 3 }),
                0xF5 => Ok(DecodedOpcode { instruction: SBC, mode: IndexedZeroPageX, cycles: 4 }),
                0xED => Ok(DecodedOpcode { instruction: SBC, mode: Absolute, cycles: 4 }),
                0xFD => Ok(DecodedOpcode { instruction: SBC, mode: IndexedAbsoluteX, cycles: 4 }),
                0xF9 => Ok(DecodedOpcode { instruction: SBC, mode: IndexedAbsoluteY, cycles: 4 }),
                0xE1 => Ok(DecodedOpcode { instruction: SBC, mode: IndexedIndirect, cycles: 6 }),
                0xF1 => Ok(DecodedOpcode { instruction: SBC, mode: IndirectIndexed, cycles: 5 }),
                0x38 => Ok(DecodedOpcode { instruction: SEC, mode: Implied, cycles: 2 }),
                0xF8 => Ok(DecodedOpcode { instruction: SED, mode: Implied, cycles: 2 }),
                0x78 => Ok(DecodedOpcode { instruction: SEI, mode: Implied, cycles: 2 }),
                0x85 => Ok(DecodedOpcode { instruction: STA, mode: ZeroPage, cycles: 3 }),
                0x95 => Ok(DecodedOpcode { instruction: STA, mode: IndexedZeroPageX, cycles: 4 }),
                0x8D => Ok(DecodedOpcode { instruction: STA, mode: Absolute, cycles: 4 }),
                0x9D => Ok(DecodedOpcode { instruction: STA, mode: IndexedAbsoluteX, cycles: 5 }),
                0x99 => Ok(DecodedOpcode { instruction: STA, mode: IndexedAbsoluteY, cycles: 5 }),
                0x81 => Ok(DecodedOpcode { instruction: STA, mode: IndexedIndirect, cycles: 6 }),
                0x91 => Ok(DecodedOpcode { instruction: STA, mode: IndirectIndexed, cycles: 6 }),
                0x86 => Ok(DecodedOpcode { instruction: STX, mode: ZeroPage, cycles: 3 }),
                0x96 => Ok(DecodedOpcode { instruction: STX, mode: IndexedZeroPageY, cycles: 4 }),
                0x8E => Ok(DecodedOpcode { instruction: STX, mode: Absolute, cycles: 4 }),
                0x84 => Ok(DecodedOpcode { instruction: STY, mode: ZeroPage, cycles: 3 }),
                0x94 => Ok(DecodedOpcode { instruction: STY, mode: IndexedZeroPageX, cycles: 4 }),
                0x8C => Ok(DecodedOpcode { instruction: STY, mode: Absolute, cycles: 4 }),
                0xAA => Ok(DecodedOpcode { instruction: TAX, mode: Implied, cycles: 2 }),
                0xA8 => Ok(DecodedOpcode { instruction: TAY, mode: Implied, cycles: 2 }),
                0xBA => Ok(DecodedOpcode { instruction: TSX, mode: Implied, cycles: 2 }),
                0x8A => Ok(DecodedOpcode { instruction: TXA, mode: Implied, cycles: 2 }),
                0x9A => Ok(DecodedOpcode { instruction: TXS, mode: Implied, cycles: 2 }),
                0x98 => Ok(DecodedOpcode { instruction: TYA, mode: Implied, cycles: 2 }),
                // Below are all invalid opcodes. Need to be implemented in order to support all games and to pass all tests
                0x04 => Ok(DecodedOpcode { instruction: NOP, mode: ZeroPage, cycles: 3 }),
                0x44 => Ok(DecodedOpcode { instruction: NOP, mode: ZeroPage, cycles: 3 }),
                0x64 => Ok(DecodedOpcode { instruction: NOP, mode: ZeroPage, cycles: 3 }),
                0x0C => Ok(DecodedOpcode { instruction: NOP, mode: Absolute, cycles: 4 }),
                0x14 => Ok(DecodedOpcode { instruction: NOP, mode: IndexedZeroPageX, cycles: 4 }),
                0x34 => Ok(DecodedOpcode { instruction: NOP, mode: IndexedZeroPageX, cycles: 4 }),
                0x54 => Ok(DecodedOpcode { instruction: NOP, mode: IndexedZeroPageX, cycles: 4 }),
                0x74 => Ok(DecodedOpcode { instruction: NOP, mode: IndexedZeroPageX, cycles: 4 }),
                0xD4 => Ok(DecodedOpcode { instruction: NOP, mode: IndexedZeroPageX, cycles: 4 }),
                0xF4 => Ok(DecodedOpcode { instruction: NOP, mode: IndexedZeroPageX, cycles: 4 }),
                0x1A => Ok(DecodedOpcode { instruction: NOP, mode: Implied, cycles: 2 }),
                0x3A => Ok(DecodedOpcode { instruction: NOP, mode: Implied, cycles: 2 }),
                0x5A => Ok(DecodedOpcode { instruction: NOP, mode: Implied, cycles: 2 }),
                0x7A => Ok(DecodedOpcode { instruction: NOP, mode: Implied, cycles: 2 }),
                0xDA => Ok(DecodedOpcode { instruction: NOP, mode: Implied, cycles: 2 }),
                0xFA => Ok(DecodedOpcode { instruction: NOP, mode: Implied, cycles: 2 }),
                0x80 => Ok(DecodedOpcode { instruction: NOP, mode: Immediate, cycles: 2 }),
                0x1C => Ok(DecodedOpcode { instruction: NOP, mode: IndexedAbsoluteX, cycles: 4 }),
                0x3C => Ok(DecodedOpcode { instruction: NOP, mode: IndexedAbsoluteX, cycles: 4 }),
                0x5C => Ok(DecodedOpcode { instruction: NOP, mode: IndexedAbsoluteX, cycles: 4 }),
                0x7C => Ok(DecodedOpcode { instruction: NOP, mode: IndexedAbsoluteX, cycles: 4 }),
                0xDC => Ok(DecodedOpcode { instruction: NOP, mode: IndexedAbsoluteX, cycles: 4 }),
                0xFC => Ok(DecodedOpcode { instruction: NOP, mode: IndexedAbsoluteX, cycles: 4 }),
                // Below are the non-NOP illegal aka unofficial opcodes
                // REMINDER:
                //     IndexedIndirect is izx is Indirect x is ($00,X)
                //     IndirectIndexed is izy is Indirect y is ($00),Y
                0xA3 => Ok(DecodedOpcode { instruction: LAX, mode: IndexedIndirect, cycles: 6 }),
                0xA7 => Ok(DecodedOpcode { instruction: LAX, mode: ZeroPage, cycles: 3 }),
                0xAF => Ok(DecodedOpcode { instruction: LAX, mode: Absolute, cycles: 4 }),
                0xB3 => Ok(DecodedOpcode { instruction: LAX, mode: IndirectIndexed, cycles: 5 }),
                0xB7 => Ok(DecodedOpcode { instruction: LAX, mode: IndexedZeroPageY, cycles: 4 }),
                0xBF => Ok(DecodedOpcode { instruction: LAX, mode: IndexedAbsoluteY, cycles: 4 }),

                0x83 => Ok(DecodedOpcode { instruction: SAX, mode: IndexedIndirect, cycles: 6 }),
                0x87 => Ok(DecodedOpcode { instruction: SAX, mode: ZeroPage, cycles: 3 }),
                0x8F => Ok(DecodedOpcode { instruction: SAX, mode: Absolute, cycles: 4 }),
                0x97 => Ok(DecodedOpcode { instruction: SAX, mode: IndexedZeroPageY, cycles: 4 }),

                0xEB => Ok(DecodedOpcode { instruction: SBC, mode: Immediate, cycles: 2 }),

                0xC3 => Ok(DecodedOpcode { instruction: DCP, mode: IndexedIndirect, cycles: 8 }),
                0xC7 => Ok(DecodedOpcode { instruction: DCP, mode: ZeroPage, cycles: 5 }),
                0xCF => Ok(DecodedOpcode { instruction: DCP, mode: Absolute, cycles: 6 }),
                0xD3 => Ok(DecodedOpcode { instruction: DCP, mode: IndirectIndexed, cycles: 8 }),
                0xD7 => Ok(DecodedOpcode { instruction: DCP, mode: IndexedZeroPageX, cycles: 6 }),
                0xDB => Ok(DecodedOpcode { instruction: DCP, mode: IndexedAbsoluteY, cycles: 7 }),
                0xDF => Ok(DecodedOpcode { instruction: DCP, mode: IndexedAbsoluteX, cycles: 7 }),

                0xE3 => Ok(DecodedOpcode { instruction: ISC, mode: IndexedIndirect, cycles: 8 }),
                0xE7 => Ok(DecodedOpcode { instruction: ISC, mode: ZeroPage, cycles: 5 }),
                0xEF => Ok(DecodedOpcode { instruction: ISC, mode: Absolute, cycles: 6 }),
                0xF3 => Ok(DecodedOpcode { instruction: ISC, mode: IndirectIndexed, cycles: 8 }),
                0xF7 => Ok(DecodedOpcode { instruction: ISC, mode: IndexedZeroPageX, cycles: 6 }),
                0xFB => Ok(DecodedOpcode { instruction: ISC, mode: IndexedAbsoluteY, cycles: 7 }),
                0xFF => Ok(DecodedOpcode { instruction: ISC, mode: IndexedAbsoluteX, cycles: 7 }),

                0x03 => Ok(DecodedOpcode { instruction: SLO, mode: IndexedIndirect, cycles: 8 }),
                0x07 => Ok(DecodedOpcode { instruction: SLO, mode: ZeroPage, cycles: 5 }),
                0x0F => Ok(DecodedOpcode { instruction: SLO, mode: Absolute, cycles: 6 }),
                0x13 => Ok(DecodedOpcode { instruction: SLO, mode: IndirectIndexed, cycles: 8 }),
                0x17 => Ok(DecodedOpcode { instruction: SLO, mode: IndexedZeroPageX, cycles: 6 }),
                0x1B => Ok(DecodedOpcode { instruction: SLO, mode: IndexedAbsoluteY, cycles: 7 }),
                0x1F => Ok(DecodedOpcode { instruction: SLO, mode: IndexedAbsoluteX, cycles: 7 }),

                0x23 => Ok(DecodedOpcode { instruction: RLA, mode: IndexedIndirect, cycles: 8 }),
                0x27 => Ok(DecodedOpcode { instruction: RLA, mode: ZeroPage, cycles: 5 }),
                0x2F => Ok(DecodedOpcode { instruction: RLA, mode: Absolute, cycles: 6 }),
                0x33 => Ok(DecodedOpcode { instruction: RLA, mode: IndirectIndexed, cycles: 8 }),
                0x37 => Ok(DecodedOpcode { instruction: RLA, mode: IndexedZeroPageX, cycles: 6 }),
                0x3B => Ok(DecodedOpcode { instruction: RLA, mode: IndexedAbsoluteY, cycles: 7 }),
                0x3F => Ok(DecodedOpcode { instruction: RLA, mode: IndexedAbsoluteX, cycles: 7 }),

                0x43 => Ok(DecodedOpcode { instruction: SRE, mode: IndexedIndirect, cycles: 8 }),
                0x47 => Ok(DecodedOpcode { instruction: SRE, mode: ZeroPage, cycles: 5 }),
                0x4F => Ok(DecodedOpcode { instruction: SRE, mode: Absolute, cycles: 6 }),
                0x53 => Ok(DecodedOpcode { instruction: SRE, mode: IndirectIndexed, cycles: 8 }),
                0x57 => Ok(DecodedOpcode { instruction: SRE, mode: IndexedZeroPageX, cycles: 6 }),
                0x5B => Ok(DecodedOpcode { instruction: SRE, mode: IndexedAbsoluteY, cycles: 7 }),
                0x5F => Ok(DecodedOpcode { instruction: SRE, mode: IndexedAbsoluteX, cycles: 7 }),

                0x63 => Ok(DecodedOpcode { instruction: RRA, mode: IndexedIndirect, cycles: 8 }),
                0x67 => Ok(DecodedOpcode { instruction: RRA, mode: ZeroPage, cycles: 5 }),
                0x6F => Ok(DecodedOpcode { instruction: RRA, mode: Absolute, cycles: 6 }),
                0x73 => Ok(DecodedOpcode { instruction: RRA, mode: IndirectIndexed, cycles: 8 }),
                0x77 => Ok(DecodedOpcode { instruction: RRA, mode: IndexedZeroPageX, cycles: 6 }),
                0x7B => Ok(DecodedOpcode { instruction: RRA, mode: IndexedAbsoluteY, cycles: 7 }),
                0x7F => Ok(DecodedOpcode { instruction: RRA, mode: IndexedAbsoluteX, cycles: 7 }),

                _ => Err(DecodeError::IllegalUnimplementedOpcode {opcode: *self})
            }
        }
    }
}